import logging
import sqlite3
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = '8197209578:AAH4ypgRz9Butww_HxDTBeXJCgTzHQO1D_E'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

DB_NAME = 'transactions.db'
user_states = {}

def init_db():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            amount INTEGER
        )
    """)
    conn.commit()
    conn.close()

def save_transaction(amount):
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("INSERT INTO transactions (amount) VALUES (?)", (amount,))
    conn.commit()
    conn.close()

def get_total():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT SUM(amount) FROM transactions")
    result = cur.fetchone()[0]
    conn.close()
    return result if result else 0

def clear_transactions():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("DELETE FROM transactions")
    conn.commit()
    conn.close()

def get_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí∞ –ü–µ—Ä–µ–≤–æ–¥", "üîô –í–æ–∑–≤—Ä–∞—Ç", "üìä –û—Ç—á—ë—Ç")
    return keyboard

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞.", reply_markup=get_keyboard())

@dp.message_handler(lambda message: message.text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥")
async def set_deposit(message: types.Message):
    user_states[message.from_user.id] = "deposit"
    await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:")

@dp.message_handler(lambda message: message.text == "üîô –í–æ–∑–≤—Ä–∞—Ç")
async def set_refund(message: types.Message):
    user_states[message.from_user.id] = "refund"
    await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞:")

@dp.message_handler(lambda message: message.text == "üìä –û—Ç—á—ë—Ç")
async def show_report(message: types.Message):
    total = get_total()
    await message.answer(f"–ß—Ç–æ-—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–ª–æ—Ö–æ, –Ω–∞–∫–æ—Å–∏–ª –≤—Å–µ–≥–æ: {total} —Ä—É–±.")
    clear_transactions()
    user_states[message.from_user.id] = None  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

@dp.message_handler(lambda message: message.text.isdigit())
async def process_amount(message: types.Message):
    user_id = message.from_user.id
    amount = int(message.text)
    state = user_states.get(user_id)

    if state == "refund":
        save_transaction(-amount)
        await message.answer(f"–ò —ç—Ç–∏ –∫–æ–ø–µ–π–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç? –•–æ—Ä–æ—à–æ, —è —É—á—Ç—É —ç—Ç–∏: -{amount} —Ä—É–±.")
    else:
        save_transaction(amount)
        await message.answer(f"–û –ª–∞–≤–µ—à–∫–∞ –∫–∞–ø–Ω—É–ª–∞, —Ü–µ–ª—ã—Ö: +{amount} —Ä—É–±.")

    user_states[user_id] = None  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞

@dp.message_handler()
async def unknown_message(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∏—Å–ª–æ–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏.", reply_markup=get_keyboard())

if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)

